from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from models.db_models import PropertyCard 

# 2. Schema for structured filters extracted by the LLM (NLU)
class FilterSchema(BaseModel):
    """
    Schema for the structured JSON output from the LLM based on user's query.
    """
    city: Optional[str] = Field(None, description="Target city for the search (e.g., 'Pune', 'Mumbai').")
    bhk: Optional[List[str]] = Field(None, description="List of desired BHK configurations (e.g., ['2BHK', '3BHK']).")
    min_budget: Optional[int] = Field(None, description="Minimum budget in major currency unit.")
    max_budget: Optional[int] = Field(None, description="Maximum budget in major currency unit.")
    project_name: Optional[str] = Field(None, description="Specific project name if mentioned.")
    locality: Optional[str] = Field(None, description="Specific locality or sub-locality name.")

# 3. Request/Response models for the API endpoint
class ChatRequest(BaseModel):
    """
    Model for the incoming user chat query.
    """
    user_query: str = Field(..., description="The natural language query from the user.")

class ChatResponse(BaseModel):
    """
    Model for the outgoing API response.
    """
    summary: str = Field(..., description="4-5 sentence natural language summary generated by the LLM.")
    filters_applied: Dict[str, Any] = Field(..., description="The structured filters extracted by the NLU agent.")
    properties: List[PropertyCard] = Field(..., description="List of matching property cards.")
